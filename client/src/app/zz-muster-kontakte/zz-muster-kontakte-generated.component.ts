/*
  This file is automatically generated. Any changes will be overwritten.
  Modify zz-muster-kontakte.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { GridComponent } from '@radzen/angular/dist/grid';
import { ImageComponent } from '@radzen/angular/dist/image';
import { UploadComponent } from '@radzen/angular/dist/upload';
import { ListBoxComponent } from '@radzen/angular/dist/listbox';

import { ConfigService } from '../config.service';
import { MeldungLoeschenComponent } from '../meldung-loeschen/meldung-loeschen.component';
import { KontakteBearbeitenComponent } from '../kontakte-bearbeiten/kontakte-bearbeiten.component';
import { KontakteNeuComponent } from '../kontakte-neu/kontakte-neu.component';
import { MeldungJaNeinComponent } from '../meldung-ja-nein/meldung-ja-nein.component';
import { KontakteKontaktpersonenBearbeitenComponent } from '../kontakte-kontaktpersonen-bearbeiten/kontakte-kontaktpersonen-bearbeiten.component';
import { KontakteKontaktpersonenNeuComponent } from '../kontakte-kontaktpersonen-neu/kontakte-kontaktpersonen-neu.component';
import { KontakteSuchenComponent } from '../kontakte-suchen/kontakte-suchen.component';

import { DbOptimoService } from '../db-optimo.service';
import { SecurityService } from '../security.service';

export class ZzMusterKontakteGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading8') heading8: HeadingComponent;
  @ViewChild('heading9') heading9: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('panel2') panel2: PanelComponent;
  @ViewChild('templateFormKontakte') templateFormKontakte: TemplateFormComponent;
  @ViewChild('label7') label7: LabelComponent;
  @ViewChild('anredeId') anredeId: DropDownComponent;
  @ViewChild('label8') label8: LabelComponent;
  @ViewChild('requiredValidator0') requiredValidator0: RequiredValidatorComponent;
  @ViewChild('name1') name1: TextBoxComponent;
  @ViewChild('label18') label18: LabelComponent;
  @ViewChild('requiredValidator2') requiredValidator2: RequiredValidatorComponent;
  @ViewChild('name2') name2: TextBoxComponent;
  @ViewChild('label9') label9: LabelComponent;
  @ViewChild('requiredValidator1') requiredValidator1: RequiredValidatorComponent;
  @ViewChild('nameKuerzel') nameKuerzel: TextBoxComponent;
  @ViewChild('label10') label10: LabelComponent;
  @ViewChild('titelVorne') titelVorne: TextBoxComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('titelHinten') titelHinten: TextBoxComponent;
  @ViewChild('label11') label11: LabelComponent;
  @ViewChild('strasse') strasse: TextBoxComponent;
  @ViewChild('label12') label12: LabelComponent;
  @ViewChild('plz') plz: TextBoxComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('ort') ort: TextBoxComponent;
  @ViewChild('label28') label28: LabelComponent;
  @ViewChild('notiz') notiz: TextAreaComponent;
  @ViewChild('label22') label22: LabelComponent;
  @ViewChild('geburtsdatum') geburtsdatum: DatePickerComponent;
  @ViewChild('label6') label6: LabelComponent;
  @ViewChild('versicherungsnummer') versicherungsnummer: TextBoxComponent;
  @ViewChild('label5') label5: LabelComponent;
  @ViewChild('staatsangehoerigkeit') staatsangehoerigkeit: TextBoxComponent;
  @ViewChild('label13') label13: LabelComponent;
  @ViewChild('telefon1') telefon1: TextBoxComponent;
  @ViewChild('label14') label14: LabelComponent;
  @ViewChild('telefon2') telefon2: TextBoxComponent;
  @ViewChild('label15') label15: LabelComponent;
  @ViewChild('eMail1') eMail1: TextBoxComponent;
  @ViewChild('label16') label16: LabelComponent;
  @ViewChild('eMail2') eMail2: TextBoxComponent;
  @ViewChild('label23') label23: LabelComponent;
  @ViewChild('webseite') webseite: TextBoxComponent;
  @ViewChild('label26') label26: LabelComponent;
  @ViewChild('label27') label27: LabelComponent;
  @ViewChild('kontoName') kontoName: TextBoxComponent;
  @ViewChild('label25') label25: LabelComponent;
  @ViewChild('kontoNummer') kontoNummer: TextBoxComponent;
  @ViewChild('label24') label24: LabelComponent;
  @ViewChild('kontoInfo') kontoInfo: TextAreaComponent;
  @ViewChild('buttonKontakteSpeichern') buttonKontakteSpeichern: ButtonComponent;
  @ViewChild('panel1') panel1: PanelComponent;
  @ViewChild('gridKontaktpersonen') gridKontaktpersonen: GridComponent;
  @ViewChild('buttonKontaktpersonNeu') buttonKontaktpersonNeu: ButtonComponent;
  @ViewChild('buttonKontaktpersonBearbeiten') buttonKontaktpersonBearbeiten: ButtonComponent;
  @ViewChild('buttonKontaktpersonLoeschen') buttonKontaktpersonLoeschen: ButtonComponent;
  @ViewChild('bild') bild: PanelComponent;
  @ViewChild('bildUrl') bildUrl: ImageComponent;
  @ViewChild('uploadBildBase') uploadBildBase: UploadComponent;
  @ViewChild('buttonBildEntfernen') buttonBildEntfernen: ButtonComponent;
  @ViewChild('panel3') panel3: PanelComponent;
  @ViewChild('formBenutzer') formBenutzer: TemplateFormComponent;
  @ViewChild('benutzernameLabel') benutzernameLabel: LabelComponent;
  @ViewChild('benutzername') benutzername: TextBoxComponent;
  @ViewChild('initialenLabel') initialenLabel: LabelComponent;
  @ViewChild('initialen') initialen: TextBoxComponent;
  @ViewChild('notizLabel') notizLabel: LabelComponent;
  @ViewChild('textarea0') textarea0: TextAreaComponent;
  @ViewChild('panel4') panel4: PanelComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('tbxFilterName') tbxFilterName: TextBoxComponent;
  @ViewChild('label20') label20: LabelComponent;
  @ViewChild('tbxFilterStrasse') tbxFilterStrasse: TextBoxComponent;
  @ViewChild('label4') label4: LabelComponent;
  @ViewChild('ddwFilterPlz') ddwFilterPlz: DropDownComponent;
  @ViewChild('label21') label21: LabelComponent;
  @ViewChild('ddwFilterOrt') ddwFilterOrt: DropDownComponent;
  @ViewChild('label17') label17: LabelComponent;
  @ViewChild('tbxFilterNotiz') tbxFilterNotiz: TextBoxComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('lbxFilterVerlinkt') lbxFilterVerlinkt: ListBoxComponent;
  @ViewChild('buttonFilterLoeschen') buttonFilterLoeschen: ButtonComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('gridKontakte') gridKontakte: GridComponent;
  @ViewChild('buttonNeu') buttonNeu: ButtonComponent;
  @ViewChild('buttonBearbeiten') buttonBearbeiten: ButtonComponent;
  @ViewChild('buttonLoeschen') buttonLoeschen: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;

  security: SecurityService;
  letzteBaseID: any;
  strFilterKontakte: any;
  strFilterKontakteAlt: any;
  rstVerlinkt: any;
  dsoBenutzer: any;
  rstBaseAnreden: any;
  rstBasePlz: any;
  rstBaseOrte: any;
  onKeyEnterStartFilter: any;
  onFocusOutStartFilter: any;
  FilterKontakteErstellenUndNeuLaden: any;
  parameters: any;
  rstBaseKontaktpersonen: any;
  rstBaseKontaktpersonenCount: any;
  dsoBaseKontaktpersonen: any;
  rstBaseKontakte: any;
  rstBaseKontakteCount: any;
  dsoBaseKontakte: any;
  dsoBenutzerDetails: any;
  dsoBaseKontakteDetails: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.letzteBaseID = null;

    this.strFilterKontakte = '';

    this.strFilterKontakteAlt = 'Unbekannt';

    this.rstVerlinkt = [{text: 'Benutzer', value: 'Benutzer'}, {text: 'Kunde', value: 'Kunde'}, {text: 'Mitarbeiter', value: 'Mitarbeiter'}];

    this.dbOptimo.getBenutzers(`BenutzerName eq '${this.security.user.name}'`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.dsoBenutzer = result.value[0];

      this.dbOptimo.getBaseAnredens(null, null, null, null, null, null, null, null)
      .subscribe((result: any) => {
        this.rstBaseAnreden = result.value;

        this.FilterKontakteErstellenUndNeuLaden();
      }, (result: any) => {

      });
    }, (result: any) => {

    });

    this.dbOptimo.getVwBasePlzs(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstBasePlz = result.value;
    }, (result: any) => {

    });

    this.dbOptimo.getVwBaseOrtes(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstBaseOrte = result.value;
    }, (result: any) => {

    });

    this.onKeyEnterStartFilter = () => {
    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
        .subscribe((result: any) => {
          }, (result: any) => {
          });
          
    this.FilterKontakteErstellenUndNeuLaden();
};

    this.onFocusOutStartFilter = () => {
    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
        .subscribe((result: any) => {
          }, (result: any) => {
          });
          
    this.FilterKontakteErstellenUndNeuLaden();
};

    this.FilterKontakteErstellenUndNeuLaden = () => {
    this.strFilterKontakte = ''

    if (this.dsoBenutzer.FilterKontakteName) {
        this.strFilterKontakte = this.strFilterKontakte + 'contains(tolower(NameGesamt),\'' + this.dsoBenutzer.FilterKontakteName.toLowerCase() + '\')'
    }

    if (this.dsoBenutzer.FilterKontakteStrasse) {
        if (this.strFilterKontakte != '') {
            this.strFilterKontakte = this.strFilterKontakte + ' AND '
        }
        this.strFilterKontakte = this.strFilterKontakte + 'contains(tolower(Strasse),\'' + this.dsoBenutzer.FilterKontakteStrasse.toLowerCase() + '\')'
    }
    
    if (this.dsoBenutzer.FilterKontaktePlz) {
        if (this.strFilterKontakte != '') {
            this.strFilterKontakte = this.strFilterKontakte + ' AND '
        }
        this.strFilterKontakte = this.strFilterKontakte + 'contains(tolower(Plz),\'' + this.dsoBenutzer.FilterKontaktePlz.toLowerCase() + '\')'
    }

    if (this.dsoBenutzer.FilterKontakteOrt) {
        if (this.strFilterKontakte != '') {
            this.strFilterKontakte = this.strFilterKontakte + ' AND '
        }
        this.strFilterKontakte = this.strFilterKontakte + 'contains(tolower(Ort),\'' + this.dsoBenutzer.FilterKontakteOrt.toLowerCase() + '\')'
    }
    
    if (this.dsoBenutzer.FilterKontakteNotiz) {
        if (this.strFilterKontakte != '') {
            this.strFilterKontakte = this.strFilterKontakte + ' AND '
        }
        this.strFilterKontakte = this.strFilterKontakte + 'contains(tolower(Notiz),\'' + this.dsoBenutzer.FilterKontakteNotiz.toLowerCase() + '\')'
    }
    
    if (this.dsoBenutzer.FilterKontakteVerlinkt) {
      if (this.strFilterKontakte != '') {
          this.strFilterKontakte = this.strFilterKontakte + ' AND '
      }

      switch (this.dsoBenutzer.FilterKontakteVerlinkt) {
        case "Benutzer":
          this.strFilterKontakte = this.strFilterKontakte + 'BenutzerID ne null'
          break;
  
        case "Kunde":
          this.strFilterKontakte = this.strFilterKontakte + 'KundenID ne null'
          break;
      
        case "Mitarbeiter":
          this.strFilterKontakte = this.strFilterKontakte + 'MitarbeiterID ne null'
          break;
  
        default:
          break;
      }
    }
    
    // Filter nur ausführen, wenn er sich geändert hat
    if (this.strFilterKontakte != this.strFilterKontakteAlt) {
        this.strFilterKontakteAlt = this.strFilterKontakte
        this.gridKontakte.load()
    }
};
  }

  button0Click(event: any) {
    this.dialogService.open(KontakteSuchenComponent, { parameters: {}, width: 450, height: 700, title: `Suchen Kontakt` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.notificationService.notify({ severity: "info", summary: ``, detail: `Jetzt ist was da` });
      }
    });
  }

  button1Click(event: any) {
    this.dialogService.open(KontakteSuchenComponent, { parameters: {}, width: 450, height: 700, title: `Suchen Kontakt` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.notificationService.notify({ severity: "info", summary: ``, detail: `Jetzt ist was da` });
      }
    });
  }

  buttonKontakteSpeichernClick(event: any) {
    this.dbOptimo.updateBase(null, this.dsoBaseKontakteDetails.BaseID, this.dsoBaseKontakteDetails)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: ``, detail: `Änderungen gespeichert` });

      this.gridKontakte.load();
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Änderungen konnten nicht gespeichert werden!` });
    });
  }

  gridKontaktpersonenLoadData(event: any) {
    this.dbOptimo.getBaseKontaktes(`BaseID eq ${this.dsoBaseKontakte.BaseID}`, event.top, event.skip, `${event.orderby || 'NameKontakt'}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.rstBaseKontaktpersonen = result.value;

      this.rstBaseKontaktpersonenCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Kontaktpersonen können nicht geladen werden!` });
    });
  }

  gridKontaktpersonenRowDoubleClick(event: any) {
    this.dialogService.open(KontakteKontaktpersonenBearbeitenComponent, { parameters: {KontaktID: event.KontaktID}, title: `Bearbeiten Kontaktperson` });
  }

  gridKontaktpersonenRowSelect(event: any) {
    this.dsoBaseKontaktpersonen = event;
  }

  buttonKontaktpersonNeuClick(event: any) {
    this.dialogService.open(KontakteKontaktpersonenNeuComponent, { parameters: {BaseID: this.dsoBaseKontakteDetails.BaseID}, title: `Neue Kontaktperson` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKontaktpersonen.load();
      }
    });
  }

  buttonKontaktpersonBearbeitenClick(event: any) {
    this.dialogService.open(KontakteKontaktpersonenBearbeitenComponent, { parameters: {KontaktID: this.dsoBaseKontaktpersonen.KontaktID}, title: `Bearbeiten Kontaktperson` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKontaktpersonen.load();
      }
    });
  }

  buttonKontaktpersonLoeschenClick(event: any) {
    this.dialogService.open(MeldungLoeschenComponent, { parameters: {strMeldung: "Soll die Kontaktperson '" + this.dsoBaseKontaktpersonen.NameKontakt + "' gelöscht werden?"}, title: `Löschen Kontaktperson` })
        .afterClosed().subscribe(result => {
              if (result == 'Löschen') {
              this.dbOptimo.deleteBaseKontakte(this.dsoBaseKontaktpersonen.KontaktID)
        .subscribe((result: any) => {
              this.notificationService.notify({ severity: "success", summary: ``, detail: `Kontaktperson gelöscht` });

        this.gridKontaktpersonen.load();
        }, (result: any) => {
              this.notificationService.notify({ severity: "error", summary: ``, detail: `Kontaktperson konnte nicht gelöscht werden!` });
        });
      }
    });
  }

  uploadBildBaseBeforeUpload(event: any) {
    var strDateiName = this.uploadBildBase.fileUpload.files[0].name;
var strDateiEndung = strDateiName.substring(strDateiName.indexOf("."));

this.dsoBaseKontakte.BildURL = 'https://medien.optimo.app/upload/bilder/base/KeinBildPerson.png';
this.dsoBaseKontakte.BildURL = 'https://medien.optimo.app/upload/bilder/base/' + this.dsoBaseKontakte.BaseID + strDateiEndung;
  }

  uploadBildBaseError(event: any) {
    this.notificationService.notify({ severity: "error", summary: `Bild`, detail: `Hochladen fehlgeschlagen!` });
  }

  uploadBildBaseUpload(event: any) {
    this.dbOptimo.updateBase(null, this.dsoBaseKontakte.BaseID, this.dsoBaseKontakte)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.notificationService.notify({ severity: "success", summary: `Bild`, detail: `Erfolgreich hochgeladen!` });
  }

  buttonBildEntfernenClick(event: any) {
    this.dialogService.open(MeldungJaNeinComponent, { parameters: {strMeldung: "Soll das Bild von '" + this.dsoBaseKontakte.Name1 + " " + this.dsoBaseKontakte.Name2 + "' entfernt werden?"}, title: `Bild entfernen` })
        .afterClosed().subscribe(result => {
              if (result == 'Ja') {
        this.dsoBaseKontakte.BildURL = 'https://medien.optimo.app/upload/bilder/base/KeinBildPerson.png';
      }

      if (result == 'Ja') {
              this.dbOptimo.updateBase(null, this.dsoBaseKontakte.BaseID, this.dsoBaseKontakte)
        .subscribe((result: any) => {
              this.notificationService.notify({ severity: "success", summary: ``, detail: `Bild entfernt` });
        }, (result: any) => {
              this.notificationService.notify({ severity: "error", summary: ``, detail: `Bild konnte nicht entfernt werden!` });
        });
      }
    });
  }

  ddwFilterPlzChange(event: any) {
    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.FilterKontakteErstellenUndNeuLaden();
  }

  ddwFilterOrtChange(event: any) {
    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.FilterKontakteErstellenUndNeuLaden();
  }

  lbxFilterVerlinktChange(event: any) {
    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.FilterKontakteErstellenUndNeuLaden();
  }

  buttonFilterLoeschenClick(event: any) {
    this.dsoBenutzer.FilterKontakteName = null
this.dsoBenutzer.FilterKontakteStrasse = null
this.dsoBenutzer.FilterKontaktePlz = null
this.dsoBenutzer.FilterKontakteOrt = null
this.dsoBenutzer.FilterKontakteNotiz = null
this.dsoBenutzer.FilterKontakteVerlinkt = null

    this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.FilterKontakteErstellenUndNeuLaden();
  }

  gridKontakteLoadData(event: any) {
    this.dbOptimo.getVwBaseKontaktes(`${this.strFilterKontakte}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.rstBaseKontakte = result.value;

      this.rstBaseKontakteCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      if (this.rstBaseKontakte.find(p => p.BaseID == this.letzteBaseID) != null) {
    // letzteBaseID wurde in rstBaseKontakte gefunden
    this.gridKontakte.onSelect(this.rstBaseKontakte.find(p => p.BaseID == this.letzteBaseID))
} else {
    // letzteBaseID wurde in rstBaseKontakte NICHT gefunden
    this.letzteBaseID = null;
    this.gridKontakte.onSelect(this.rstBaseKontakte[0]);
}
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Kontakte können nicht geladen werden!` });
    });
  }

  gridKontakteRowDoubleClick(event: any) {
    this.letzteBaseID = this.dsoBaseKontakte.BaseID;

    this.dialogService.open(KontakteBearbeitenComponent, { parameters: {BaseID: event.BaseID}, width: 1000, title: `Bearbeiten Kontakt` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKontakte.load();
      }
    });
  }

  gridKontakteRowSelect(event: any) {
    this.letzteBaseID = this.dsoBaseKontakte.BaseID;

    this.dsoBaseKontakte = event;

    this.dbOptimo.getBenutzers(`BaseID eq ${event.BaseID}`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.dsoBenutzerDetails = result.value[0];
    }, (result: any) => {

    });

    this.dbOptimo.getBases(`BaseID eq ${event.BaseID}`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.dsoBaseKontakteDetails = result.value[0];

      this.gridKontaktpersonen.load();
    }, (result: any) => {

    });
  }

  buttonNeuClick(event: any) {
    this.letzteBaseID = this.dsoBaseKontakte.BaseID;

    this.dialogService.open(KontakteNeuComponent, { parameters: {}, width: 1000, title: `Neuer Kontakt` })
        .afterClosed().subscribe(result => {
              if (result != null) {
            this.letzteBaseID = result.BaseID;
      }

      if (result != null) {
        this.gridKontakte.load();
      }
    });
  }

  buttonBearbeitenClick(event: any) {
    this.letzteBaseID = this.dsoBaseKontakte.BaseID;

    this.dialogService.open(KontakteBearbeitenComponent, { parameters: {BaseID: this.dsoBaseKontakte.BaseID}, width: 1000, title: `Bearbeiten Kontakt` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKontakte.load();
      }
    });
  }

  buttonLoeschenClick(event: any) {
    this.letzteBaseID = null;

    this.dialogService.open(MeldungLoeschenComponent, { parameters: {strMeldung: "Soll der Kontakt '" + this.dsoBaseKontakte.Name1 + " " + this.dsoBaseKontakte.Name2 + "' gelöscht werden?"}, title: `Löschen Kontakt` })
        .afterClosed().subscribe(result => {
              if (result == 'Löschen') {
              this.dbOptimo.deleteBase(this.dsoBaseKontakte.BaseID)
        .subscribe((result: any) => {
              this.notificationService.notify({ severity: "success", summary: ``, detail: `Kontakt gelöscht` });

        this.gridKontakte.load();
        }, (result: any) => {
              this.notificationService.notify({ severity: "error", summary: ``, detail: `Kontakt konnte nicht gelöscht werden!` });
        });
      }
    });
  }
}
