/*
  This file is automatically generated. Any changes will be overwritten.
  Modify device.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { GridComponent } from '@radzen/angular/dist/grid';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';

import { ConfigService } from '../config.service';
import { MeldungLoeschenComponent } from '../meldung-loeschen/meldung-loeschen.component';
import { DeviceBearbeitenComponent } from '../device-bearbeiten/device-bearbeiten.component';
import { DeviceNeuComponent } from '../device-neu/device-neu.component';
import { MeldungOkComponent } from '../meldung-ok/meldung-ok.component';

import { DbOptimoService } from '../db-optimo.service';
import { SecurityService } from '../security.service';

export class DeviceGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading0') heading0: HeadingComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('gridDevice') gridDevice: GridComponent;
  @ViewChild('buttonNeu') buttonNeu: ButtonComponent;
  @ViewChild('buttonBearbeiten') buttonBearbeiten: ButtonComponent;
  @ViewChild('buttonLoeschen') buttonLoeschen: ButtonComponent;
  @ViewChild('panel1') panel1: PanelComponent;
  @ViewChild('textarea0') textarea0: TextAreaComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;

  security: SecurityService;
  letzteDeviceID: any;
  parameters: any;
  rstDevice: any;
  rstDeviceCount: any;
  dsoDevice: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.letzteDeviceID = null;

    this.gridDevice.load();
  }

  button1Click(event: any) {
    this.dialogService.open(MeldungOkComponent, { parameters: {strMeldung: "Drucken ist für dieses Modul noch nicht aktiviert!"}, width: 600, title: `Info` });
  }

  gridDeviceLoadData(event: any) {
    this.dbOptimo.getInventurDevices(`${event.filter}`, event.top, event.skip, `${event.orderby || 'DeviceNummer'}`, event.top != null && event.skip != null, `InventurBasis`, null, null)
    .subscribe((result: any) => {
      this.rstDevice = result.value;

      this.rstDeviceCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      if (this.rstDevice.find(p => p.DeviceID == this.letzteDeviceID) != null) {
    // letzteDeviceID wurde in rstDevice gefunden
    this.gridDevice.onSelect(this.rstDevice.find(p => p.DeviceID == this.letzteDeviceID))
} else {
    // letzteDeviceID wurde in rstDevice NICHT gefunden
    this.letzteDeviceID = null;
    this.gridDevice.onSelect(this.rstDevice[0]);
}
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Geräte können nicht geladen werden!` });
    });
  }

  gridDeviceRowDoubleClick(event: any) {
    this.letzteDeviceID = event.DeviceID;

    this.dialogService.open(DeviceBearbeitenComponent, { parameters: {DeviceID: event.DeviceID}, title: `Bearbeiten Gerät` });
  }

  gridDeviceRowSelect(event: any) {
    this.dsoDevice = event;
  }

  buttonNeuClick(event: any) {
    this.dialogService.open(DeviceNeuComponent, { parameters: {}, title: `Neues Gerät` })
        .afterClosed().subscribe(result => {
              if (result != null) {
            this.letzteDeviceID = result.DeviceID;
      }

      if (result != null) {
        this.gridDevice.load();
      }
    });
  }

  buttonBearbeitenClick(event: any) {
    this.letzteDeviceID = this.dsoDevice.DeviceID;

    this.dialogService.open(DeviceBearbeitenComponent, { parameters: {DeviceID: this.dsoDevice.DeviceID}, title: `Bearbeiten Gerät` });
  }

  buttonLoeschenClick(event: any) {
    this.dialogService.open(MeldungLoeschenComponent, { parameters: {strMeldung: "Soll das Gerät '" + this.dsoDevice.DeviceNummer + " " + this.dsoDevice.DeviceTitel + "' gelöscht werden?"}, title: `Löschen Gerät` })
        .afterClosed().subscribe(result => {
              if (result == 'Löschen') {
              this.dbOptimo.deleteInventurDevice(this.dsoDevice.DeviceID)
        .subscribe((result: any) => {
              this.letzteDeviceID = null;
        }, (result: any) => {
              this.notificationService.notify({ severity: "error", summary: ``, detail: `Gerät konnte nicht gelöscht werden!` });
        });
      }
    });
  }
}
