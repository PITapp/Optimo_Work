/*
  This file is automatically generated. Any changes will be overwritten.
  Modify benutzer-bearbeiten.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { ListBoxComponent } from '@radzen/angular/dist/listbox';
import { PasswordComponent } from '@radzen/angular/dist/password';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';

import { DbOptimoService } from '../db-optimo.service';
import { SecurityService } from '../security.service';

export class BenutzerBearbeitenGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('label4') label4: LabelComponent;
  @ViewChild('textbox0') textbox0: TextBoxComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('requiredValidator4') requiredValidator4: RequiredValidatorComponent;
  @ViewChild('anmeldename') anmeldename: TextBoxComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('requiredValidator2') requiredValidator2: RequiredValidatorComponent;
  @ViewChild('initialen') initialen: TextBoxComponent;
  @ViewChild('roleNamesLabel') roleNamesLabel: LabelComponent;
  @ViewChild('requiredValidator3') requiredValidator3: RequiredValidatorComponent;
  @ViewChild('roleNames') roleNames: ListBoxComponent;
  @ViewChild('passwordLabel') passwordLabel: LabelComponent;
  @ViewChild('password') password: PasswordComponent;
  @ViewChild('confirmPasswordLabel') confirmPasswordLabel: LabelComponent;
  @ViewChild('confirmPassword') confirmPassword: PasswordComponent;
  @ViewChild('label19') label19: LabelComponent;
  @ViewChild('notiz') notiz: TextAreaComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;
  @ViewChild('textarea0') textarea0: TextAreaComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;

  security: SecurityService;
  rstRollen: any;
  dsoBenutzer: any;
  strNameKontakt: any;
  dsoUser: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbOptimo.getVwRollens(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstRollen = result.value;
    }, (result: any) => {

    });

    this.dbOptimo.getBenutzerByBenutzerId(`Base`, this.parameters.BenutzerID)
    .subscribe((result: any) => {
      this.dsoBenutzer = result;

      this.strNameKontakt = result.Base.Name1 + ' ' + result.Base.Name2;

      this.security.getUserById(`${result.AspNetUsers_Id}`)
      .subscribe((result: any) => {
        this.dsoUser = result;
      }, (result: any) => {

      });
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.dsoUser.UserName = this.dsoBenutzer.BaseID 

    this.security.updateUser(`${this.dsoBenutzer.AspNetUsers_Id}`, this.dsoUser)
    .subscribe((result: any) => {
      this.dbOptimo.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
      .subscribe((result: any) => {
        this.notificationService.notify({ severity: "success", summary: ``, detail: `Benutzer aktualisiert` });

        this.dialogRef.close(result);
      }, (result: any) => {
        this.notificationService.notify({ severity: "error", summary: ``, detail: `Benutzer (Schritt 2) konnte nicht aktualisiert werden!` })
        .subscribe(() => {

        });
      });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Benutzer (Schritt 1) konnte nicht aktualisiert werden!` });
    });
  }

  button2Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
