/*
  This file is automatically generated. Any changes will be overwritten.
  Modify inventur.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { GridComponent } from '@radzen/angular/dist/grid';

import { ConfigService } from '../config.service';
import { InventurLagerorteBearbeitenComponent } from '../inventur-lagerorte-bearbeiten/inventur-lagerorte-bearbeiten.component';
import { MeldungOkComponent } from '../meldung-ok/meldung-ok.component';

import { DbOptimoService } from '../db-optimo.service';
import { SecurityService } from '../security.service';

export class InventurGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading18') heading18: HeadingComponent;
  @ViewChild('heading19') heading19: HeadingComponent;
  @ViewChild('heading21') heading21: HeadingComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('panel1') panel1: PanelComponent;
  @ViewChild('gridLagerorte') gridLagerorte: GridComponent;
  @ViewChild('buttonLagerortBearbeiten') buttonLagerortBearbeiten: ButtonComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('gridErfassung') gridErfassung: GridComponent;
  @ViewChild('buttonBearbeitenProtokoll') buttonBearbeitenProtokoll: ButtonComponent;
  @ViewChild('panel3') panel3: PanelComponent;
  @ViewChild('panel4') panel4: PanelComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;

  security: SecurityService;
  parameters: any;
  rstLagerorte: any;
  rstLagerorteCount: any;
  dsoLagerort: any;
  rstErfassung: any;
  rstErfassungCount: any;
  dsoErfassung: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.gridLagerorte.load();
  }

  button1Click(event: any) {
    this.dialogService.open(MeldungOkComponent, { parameters: {strMeldung: "Drucken ist für dieses Modul noch nicht aktiviert!"}, width: 600, title: `Info` });
  }

  gridLagerorteLoadData(event: any) {
    this.dbOptimo.getInventurBases(`${event.filter}`, event.top, event.skip, `${event.orderby || 'LagerortNummer, LagerortTitel'}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.rstLagerorte = result.value;

      this.rstLagerorteCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      this.gridLagerorte.onSelect(this.rstLagerorte[0]);
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Lagerorte können nicht geladen werden!` });
    });
  }

  gridLagerorteRowDoubleClick(event: any) {
    this.dialogService.open(InventurLagerorteBearbeitenComponent, { parameters: {InventurID: event.InventurID}, title: `Lagerort bearbeiten` });
  }

  gridLagerorteRowSelect(event: any) {
    this.dsoLagerort = event;
  }

  buttonLagerortBearbeitenClick(event: any) {
    this.dialogService.open(InventurLagerorteBearbeitenComponent, { parameters: {InventurID: this.dsoLagerort.InventurID}, title: `Lagerort bearbeiten` });
  }

  gridErfassungLoadData(event: any) {
    this.dbOptimo.getVwInventurErfassungs(`${event.filter ? event.filter + ' and ' : ''}${this.dsoLagerort.InventurID ? 'InventurID eq ' + this.dsoLagerort.InventurID : ''} `, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.rstErfassung = result.value;

      this.rstErfassungCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Erfassung können nicht geladen werden!` });
    });
  }

  gridErfassungRowDoubleClick(event: any) {
    this.dialogService.open(InventurLagerorteBearbeitenComponent, { parameters: {InventurID: event.InventurID}, title: `Lagerort bearbeiten` });
  }

  gridErfassungRowSelect(event: any) {
    this.dsoErfassung = event;
  }
}
